//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Section06_L19.OrganizationEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets0dc338b3f5e078cc34142372681eb647b8515d1cf682d869df1a2742a5885855))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets0dc338b3f5e078cc34142372681eb647b8515d1cf682d869df1a2742a5885855 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "0dc338b3f5e078cc34142372681eb647b8515d1cf682d869df1a2742a5885855"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "OrganizationModelStoreContainer.Department")
            {
                return GetView0();
            }

            if (extentName == "OrganizationModelStoreContainer.Employee")
            {
                return GetView1();
            }

            if (extentName == "OrganizationEntities.Departments")
            {
                return GetView2();
            }

            if (extentName == "OrganizationEntities.Employees")
            {
                return GetView3();
            }

            if (extentName == "OrganizationEntities.SalaryInfoes")
            {
                return GetView4();
            }

            if (extentName == "OrganizationModelStoreContainer.Person")
            {
                return GetView5();
            }

            if (extentName == "OrganizationModelStoreContainer.PersonAddress")
            {
                return GetView6();
            }

            if (extentName == "OrganizationEntities.People")
            {
                return GetView7();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for OrganizationModelStoreContainer.Department.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Department
        [OrganizationModel.Store.Department](T1.Department_Id, T1.Department_Name, T1.Department_HOD, T1.Department_Gender)
    FROM (
        SELECT 
            T.Id AS Department_Id, 
            T.Name AS Department_Name, 
            T.HOD AS Department_HOD, 
            T.Gender AS Department_Gender, 
            True AS _from0
        FROM OrganizationEntities.Departments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for OrganizationModelStoreContainer.Employee.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employee
        [OrganizationModel.Store.Employee](T3.Employee_Id, T3.Employee_Name, T3.Employee_Salary, T3.Employee_Gender, T3.Employee_DOB, T3.Employee_DepId, T3.Employee_UpdatedDate)
    FROM (
        SELECT T1.Employee_Id, T2.Employee_Name, T1.Employee_Salary, T2.Employee_Gender, T2.Employee_DOB, T2.Employee_DepId, T2.Employee_UpdatedDate, T2._from0, T1._from1
        FROM  (
            SELECT 
                T.Id AS Employee_Id, 
                T.Salary AS Employee_Salary, 
                True AS _from1
            FROM OrganizationEntities.SalaryInfoes AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS Employee_Id, 
                T.Name AS Employee_Name, 
                T.Gender AS Employee_Gender, 
                T.DOB AS Employee_DOB, 
                T.DepId AS Employee_DepId, 
                T.UpdatedDate AS Employee_UpdatedDate, 
                True AS _from0
            FROM OrganizationEntities.Employees AS T) AS T2
            ON T1.Employee_Id = T2.Employee_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for OrganizationEntities.Departments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Departments
        [OrganizationModel.Department](T1.Department_Id, T1.Department_Name, T1.Department_HOD, T1.Department_Gender)
    FROM (
        SELECT 
            T.Id AS Department_Id, 
            T.Name AS Department_Name, 
            T.HOD AS Department_HOD, 
            T.Gender AS Department_Gender, 
            True AS _from0
        FROM OrganizationModelStoreContainer.Department AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for OrganizationEntities.Employees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees
        [OrganizationModel.Employee](T1.Employee_Id, T1.Employee_Name, T1.Employee_Gender, T1.Employee_DOB, T1.Employee_DepId, T1.Employee_UpdatedDate)
    FROM (
        SELECT 
            T.Id AS Employee_Id, 
            T.Name AS Employee_Name, 
            T.Gender AS Employee_Gender, 
            T.DOB AS Employee_DOB, 
            T.DepId AS Employee_DepId, 
            T.UpdatedDate AS Employee_UpdatedDate, 
            True AS _from0
        FROM OrganizationModelStoreContainer.Employee AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for OrganizationEntities.SalaryInfoes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SalaryInfoes
        [OrganizationModel.SalaryInfo](T1.SalaryInfo_Id, T1.SalaryInfo_Salary)
    FROM (
        SELECT 
            T.Id AS SalaryInfo_Id, 
            T.Salary AS SalaryInfo_Salary, 
            True AS _from0
        FROM OrganizationModelStoreContainer.Employee AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for OrganizationModelStoreContainer.Person.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person
        [OrganizationModel.Store.Person](T1.Person_Id, T1.Person_Name, T1.Person_Email)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.Name AS Person_Name, 
            T.Email AS Person_Email, 
            True AS _from0
        FROM OrganizationEntities.People AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for OrganizationModelStoreContainer.PersonAddress.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PersonAddress
        [OrganizationModel.Store.PersonAddress](T1.PersonAddress_PersonId, T1.PersonAddress_Address)
    FROM (
        SELECT 
            T.Id AS PersonAddress_PersonId, 
            T.Address AS PersonAddress_Address, 
            True AS _from0
        FROM OrganizationEntities.People AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for OrganizationEntities.People.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing People
        [OrganizationModel.Person](T3.Person_Id, T3.Person_Name, T3.Person_Email, T3.Person_Address)
    FROM (
        SELECT T1.Person_Id, T2.Person_Name, T2.Person_Email, T1.Person_Address, T2._from0, T1._from1
        FROM  (
            SELECT 
                T.PersonId AS Person_Id, 
                T.Address AS Person_Address, 
                True AS _from1
            FROM OrganizationModelStoreContainer.PersonAddress AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS Person_Id, 
                T.Name AS Person_Name, 
                T.Email AS Person_Email, 
                True AS _from0
            FROM OrganizationModelStoreContainer.Person AS T) AS T2
            ON T1.Person_Id = T2.Person_Id
    ) AS T3");
        }
    }
}
